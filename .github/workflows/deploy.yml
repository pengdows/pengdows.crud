name: Build, Test & Publish NuGet Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # Needed for git push and release creation

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Install coverage tools
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run tests and collect coverage
        run: |
          dotnet test --no-build --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Include="[pengdows.crud]*"

      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:TestResults/**/coverage.cobertura.xml \
            -targetdir:coverage-report \
            -reporttypes:HtmlSummary \
            -assemblyfilters:+pengdows.crud

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

  publish:
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.x

      - name: Generate version number
        id: version
        run: |
          epoch=$(date +%s)
          echo "version=1.0.${epoch}.0" >> "$GITHUB_OUTPUT"
          echo "version_short=1.0.${epoch}" >> "$GITHUB_OUTPUT"

      - name: Build
        run: dotnet build pengdows.crud/pengdows.crud.csproj -c Release

      - name: Pack with custom version
        run: |
          dotnet pack pengdows.crud/pengdows.crud.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}

      - name: Push package to NuGet
        run: |
          set -euo pipefail
          dotnet nuget push pengdows.crud/bin/Release/pengdows.crud.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
          dotnet nuget push pengdows.crud.abstractions/bin/Release/pengdows.crud.abstractions.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
          dotnet nuget push pengdows.crud.fakeDb/bin/Release/pengdows.crud.fakeDb.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pengdows.crud/pengdows.crud.csproj pengdows.crud.abstractions/pengdows.crud.abstractions.csproj pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj
          git commit -m "Bump version to v${{ steps.version.outputs.version_short }}" || echo "No changes to commit"

      - name: Push version bump commit
        run: git push origin HEAD:main

      - name: Tag the release
        run: |
          git tag -a "v${{ steps.version.outputs.version_short }}" -m "Release v${{ steps.version.outputs.version_short }}"
          git push origin "v${{ steps.version.outputs.version_short }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version_short }}
          name: v${{ steps.version.outputs.version_short }}
          body: Automated release for version v${{ steps.version.outputs.version_short }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

