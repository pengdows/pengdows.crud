name: Build, Test & Publish NuGet Package

on:
  push:
  pull_request:

permissions:
  contents: write  # Needed for git push and release creation

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Clean previous coverage results
        run: rm -rf ./TestResults

      - name: Run tests and collect coverage (2m hang watchdog)
        run: |
          dotnet test --no-build --configuration Release \
            --blame-hang --blame-hang-timeout 120s \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --settings coverage.runsettings

      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"Html;Cobertura" \
            -assemblyfilters:"+pengdows.crud;-pengdows.crud.Tests;-pengdows.crud.abstractions;-pengdows.crud.fakeDb;-testbed" \
            -classfilters:"-*Test*;-*Mock*"

      - name: Enforce visual coverage from HTML report
        run: |
          set -euo pipefail

          html_file=$(find coverage-report -name "index.html" | head -n 1)

          if [[ ! -f "$html_file" ]]; then
            echo "‚ùå index.html not found!"
            exit 1
          fi

          echo "üïµÔ∏è Dumping coverage-related lines from index.html:"
          grep -i coverage "$html_file" || true

          coverage_line=$(grep -Eo '[0-9]+ of [0-9]+' "$html_file" | head -n 1)

          if [[ -z "$coverage_line" ]]; then
            echo "‚ùå Could not extract line coverage info"
            exit 1
          fi

          total_covered=$(echo "$coverage_line" | cut -d' ' -f1)
          total_lines=$(echo "$coverage_line" | cut -d' ' -f3)
          coverage_percent=$(awk -v covered="$total_covered" -v total="$total_lines" 'BEGIN { if (total == 0) { print 0 } else { printf "%.2f", (covered / total) * 100 } }')
          required=83
          too_low=$(awk "BEGIN { print ($coverage_percent < $required) ? 1 : 0 }")
          if [[ "$too_low" -eq 1 ]]; then
            echo "‚ùå Visual code coverage $coverage_percent% is below required $required%"
            exit 1
          else
            echo "‚úÖ Visual code coverage $coverage_percent% meets threshold"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: TestResults/**/coverage.cobertura.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          disable_file_fixes: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

  publish:
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Generate version number
        id: version
        run: |
          epoch=$(date +%s)
          echo "version=1.0.${epoch}.0" >> "$GITHUB_OUTPUT"
          echo "version_short=1.0.${epoch}" >> "$GITHUB_OUTPUT"

      - name: Update version in project files
        run: |
          for project in \
            pengdows.crud/pengdows.crud.csproj \
            pengdows.crud.abstractions/pengdows.crud.abstractions.csproj \
            pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj
          do
            sed -i "s|<Version>.*</Version>|<Version>${{ steps.version.outputs.version }}</Version>|" "$project"
          done

      - name: Build
        run: dotnet build pengdows.crud.sln -c Release

      - name: Pack with custom version
        run: |
          dotnet pack pengdows.crud.abstractions/pengdows.crud.abstractions.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}
          dotnet pack pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}
          dotnet pack pengdows.crud/pengdows.crud.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}

      - name: Debug API Key
        run: |
          if [ -z "$NUGET_API_KEY" ]; then
            echo "NUGET_API_KEY is empty!"
            exit 1
          else
            echo "NUGET_API_KEY is set and length is ${#NUGET_API_KEY}"
          fi
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Push package to NuGet
        run: |
          set -euo pipefail
          dotnet nuget push pengdows.crud.abstractions/bin/Release/pengdows.crud.abstractions.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
          dotnet nuget push pengdows.crud.fakeDb/bin/Release/pengdows.crud.fakeDb.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
          dotnet nuget push pengdows.crud/bin/Release/pengdows.crud.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Note protected branch push skip
        if: ${{ github.ref_protected }}
        run: echo "Branch is protected; skipping automated commit, push, and tag steps."

      - name: Commit version bump
        if: ${{ !github.ref_protected }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pengdows.crud/pengdows.crud.csproj pengdows.crud.abstractions/pengdows.crud.abstractions.csproj pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj
          git commit -m "Bump version to v${{ steps.version.outputs.version_short }}" || echo "No changes to commit"

      - name: Push version bump commit
        if: ${{ !github.ref_protected }}
        run: git push origin HEAD:${{ github.event.repository.default_branch }}

      - name: Tag the release
        if: ${{ !github.ref_protected }}
        run: |
          git tag -a "v${{ steps.version.outputs.version_short }}" -m "Release v${{ steps.version.outputs.version_short }}"
          git push origin "v${{ steps.version.outputs.version_short }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version_short }}
          name: v${{ steps.version.outputs.version_short }}
          body: Automated release for version v${{ steps.version.outputs.version_short }}
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
