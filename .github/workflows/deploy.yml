name: Build, Test & Publish NuGet Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # Needed for git push and release creation

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Verify fakeDb Public API guardrails
        run: |
          set -euo pipefail

          required_files=(
            "pengdows.crud.fakeDb/PublicAPI.Shipped.txt"
            "pengdows.crud.fakeDb/PublicAPI.Unshipped.txt"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Missing fakeDb Public API baseline file: $file"
              exit 1
            fi

            if ! git ls-files --error-unmatch "$file" > /dev/null 2>&1; then
              echo "‚ùå fakeDb Public API baseline file is not tracked by git: $file"
              exit 1
            fi
          done

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Install coverage tools
        run: |
            dotnet tool install --global dotnet-reportgenerator-globaltool
            echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Clean previous coverage results
        run: rm -rf ./TestResults

      - name: Run tests and collect coverage (2m hang watchdog)
        run: |
          dotnet test --no-build --configuration Release \
            --blame-hang --blame-hang-timeout 120s \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --settings coverage.runsettings

      - name: Generate coverage report
        run: |
            reportgenerator \
              -reports:"TestResults/**/coverage.cobertura.xml" \
              -targetdir:"coverage-report" \
              -reporttypes:"Html;Cobertura" \
              -assemblyfilters:"+pengdows.crud;-pengdows.crud.Tests;-pengdows.crud.abstractions;-pengdows.crud.fakeDb;-testbed" \
              -classfilters:"-*Test*;-*Mock*"

      - name: Enforce visual coverage from HTML report
        id: enforce_coverage
        run: |
          set -euo pipefail

          min_file="coverage-minimum.txt"
          if [[ ! -f "$min_file" ]]; then
            echo "‚ùå Coverage minimum file $min_file not found"
            exit 1
          fi

          read -r required < "$min_file" || true
          required=$(echo "${required:-}" | tr -d '\r' | xargs)

          if [[ -z "$required" ]]; then
            echo "‚ùå Coverage minimum file $min_file is empty"
            exit 1
          fi

          html_file=$(find coverage-report -name "index.html" | head -n 1)

          if [[ -z "$html_file" || ! -f "$html_file" ]]; then
            echo "‚ùå index.html not found!"
            exit 1
          fi

          echo "üïµÔ∏è Dumping coverage-related lines from index.html:"
          grep -i coverage "$html_file" || true

          read -r covered total < <(python - "$html_file" <<'PY'
import pathlib
import re
import sys

html_path = pathlib.Path(sys.argv[1])
text = html_path.read_text(encoding="utf-8", errors="ignore")
match = re.search(r'(\d[\d,]*) of (\d[\d,]*)', text)
if match is None:
    raise SystemExit("‚ùå Could not extract line coverage info")

covered = match.group(1).replace(',', '')
total = match.group(2).replace(',', '')
print(covered)
print(total)
PY
          )

          if [[ -z "$covered" || -z "$total" ]]; then
            echo "‚ùå Could not parse covered or total line count"
            exit 1
          fi

          coverage_percent=$(python - "$covered" "$total" <<'PY'
import decimal
import sys

covered = decimal.Decimal(sys.argv[1])
total = decimal.Decimal(sys.argv[2])
if total == 0:
    print("0.00")
else:
    percent = (covered / total) * decimal.Decimal("100")
    print(percent.quantize(decimal.Decimal("0.01")))
PY
          )

          echo "üìä Visual Coverage (from index.html): ${coverage_percent}%"

          too_low=$(python - "$coverage_percent" "$required" <<'PY'
import decimal
import sys

coverage = decimal.Decimal(sys.argv[1])
required = decimal.Decimal(sys.argv[2])
print(1 if coverage < required else 0)
PY
          )

          if [[ "$too_low" -eq 1 ]]; then
            echo "‚ùå Visual code coverage ${coverage_percent}% is below required ${required}%"
            exit 1
          fi

          baseline_updated=false
          new_minimum="$required"

          should_update=$(python - "$coverage_percent" "$required" <<'PY'
import decimal
import sys

coverage = decimal.Decimal(sys.argv[1])
required = decimal.Decimal(sys.argv[2])
epsilon = decimal.Decimal("0.005")
print(1 if coverage > required + epsilon else 0)
PY
          )

          if [[ "$should_update" -eq 1 ]]; then
            new_minimum=$(python - "$coverage_percent" <<'PY'
import decimal
import sys

coverage = decimal.Decimal(sys.argv[1])
print(coverage.quantize(decimal.Decimal("0.01")))
PY
            )

            printf "%s\n" "$new_minimum" > "$min_file"

            python - "$new_minimum" <<'PY'
import pathlib
import sys

new_value = sys.argv[1]
config_path = pathlib.Path("codecov.yml")
lines = config_path.read_text(encoding="utf-8").splitlines()

for index, line in enumerate(lines):
    stripped = line.lstrip()
    if stripped.startswith("target:"):
        indent = line[: len(line) - len(stripped)]
        lines[index] = f"{indent}target: {new_value}%"
        break
else:
    raise SystemExit("‚ùå Unable to locate coverage target in codecov.yml")

config_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
PY

            baseline_updated=true
            echo "‚¨ÜÔ∏è  Coverage threshold increased to ${new_minimum}%"
          else
            echo "‚úÖ Visual code coverage ${coverage_percent}% meets threshold ${required}%"
          fi

          {
            echo "coverage_percent=${coverage_percent}"
            echo "required=${required}"
            echo "baseline_updated=${baseline_updated}"
            echo "new_minimum=${new_minimum}"
          } >> "$GITHUB_OUTPUT"

      - name: Open coverage baseline pull request
        if: steps.enforce_coverage.outputs.baseline_updated == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: chore(ci): raise coverage minimum to ${{ steps.enforce_coverage.outputs.new_minimum }}%
          branch: ci/coverage-minimum
          delete-branch: true
          title: chore(ci): raise coverage minimum to ${{ steps.enforce_coverage.outputs.new_minimum }}%
          body: |
            ## Summary
            - raise the enforced coverage minimum to ${{ steps.enforce_coverage.outputs.new_minimum }}%
            - update Codecov targets to match the new floor

            ## Testing
            - not run (workflow automation)
          add-paths: |
            coverage-minimum.txt
            codecov.yml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: TestResults/**/coverage.cobertura.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          disable_file_fixes: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

  publish:
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.x

      - name: Generate version number
        id: version
        run: |
          epoch=$(date +%s)
          echo "version=1.0.${epoch}.0" >> "$GITHUB_OUTPUT"
          echo "version_short=1.0.${epoch}" >> "$GITHUB_OUTPUT"

      - name: Build
        run: dotnet build pengdows.crud.sln -c Release

      - name: Pack with custom version
        run: |
          dotnet pack pengdows.crud.abstractions/pengdows.crud.abstractions.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}
          dotnet pack pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}
          dotnet pack pengdows.crud/pengdows.crud.csproj -c Release \
            --no-build \
            -p:PackageVersion=${{ steps.version.outputs.version }}
      - name: Debug API Key
        run: |
          if [ -z "$NUGET_API_KEY" ]; then
            echo "NUGET_API_KEY is empty!"
            exit 1
          else
            echo "NUGET_API_KEY is set and length is ${#NUGET_API_KEY}"
          fi
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      - name: Push package to NuGet
        run: |
          set -euo pipefail
          dotnet nuget push pengdows.crud.abstractions/bin/Release/pengdows.crud.abstractions.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
          dotnet nuget push pengdows.crud.fakeDb/bin/Release/pengdows.crud.fakeDb.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
          dotnet nuget push pengdows.crud/bin/Release/pengdows.crud.${{ steps.version.outputs.version_short }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key "$NUGET_API_KEY"
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pengdows.crud/pengdows.crud.csproj pengdows.crud.abstractions/pengdows.crud.abstractions.csproj pengdows.crud.fakeDb/pengdows.crud.fakeDb.csproj
          git commit -m "Bump version to v${{ steps.version.outputs.version_short }}" || echo "No changes to commit"

      - name: Push version bump commit
        run: git push origin HEAD:main

      - name: Tag the release
        run: |
          git tag -a "v${{ steps.version.outputs.version_short }}" -m "Release v${{ steps.version.outputs.version_short }}"
          git push origin "v${{ steps.version.outputs.version_short }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version_short }}
          name: v${{ steps.version.outputs.version_short }}
          body: Automated release for version v${{ steps.version.outputs.version_short }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
