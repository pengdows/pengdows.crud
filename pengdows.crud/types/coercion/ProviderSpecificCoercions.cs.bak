using System;
using System.Data;
using System.Data.Common;
using System.Text.Json;
using pengdows.crud.enums;
using pengdows.crud.types.valueobjects;

namespace pengdows.crud.types.coercion;

/// <summary>
/// Provider-specific coercions that handle database-specific quirks and optimizations.
/// </summary>
public static class ProviderSpecificCoercions
{
    public static void RegisterAll(CoercionRegistry registry)
    {
        RegisterPostgreSqlSpecific(registry);
        RegisterSqlServerSpecific(registry);
        RegisterMySqlSpecific(registry);
        RegisterOracleSpecific(registry);
        RegisterSqliteSpecific(registry);
        RegisterDuckDbSpecific(registry);
    }

    private static void RegisterPostgreSqlSpecific(CoercionRegistry registry)
    {
        // PostgreSQL-specific GUID handling (prefers binary for performance)
        registry.Register(SupportedDatabase.PostgreSql, new PostgreSqlGuidCoercion());

        // PostgreSQL JSON/JSONB optimization
        registry.Register(SupportedDatabase.PostgreSql, new PostgreSqlJsonCoercion());

        // PostgreSQL arrays native support
        registry.Register(SupportedDatabase.PostgreSql, new PostgreSqlArrayCoercion());

        // PostgreSQL enum support
        registry.Register(SupportedDatabase.PostgreSql, new PostgreSqlEnumCoercion());

        // PostgreSQL bit/varbit
        registry.Register(SupportedDatabase.PostgreSql, new PostgreSqlBitCoercion());
    }

    private static void RegisterSqlServerSpecific(CoercionRegistry registry)
    {
        // SQL Server uniqueidentifier optimization
        registry.Register(SupportedDatabase.SqlServer, new SqlServerGuidCoercion());

        // SQL Server JSON (NVARCHAR with ISJSON check)
        registry.Register(SupportedDatabase.SqlServer, new SqlServerJsonCoercion());

        // SQL Server hierarchyid
        registry.Register(SupportedDatabase.SqlServer, new SqlServerHierarchyIdCoercion());

        // SQL Server money type
        registry.Register(SupportedDatabase.SqlServer, new SqlServerMoneyCoercion());
    }

    private static void RegisterMySqlSpecific(CoercionRegistry registry)
    {
        // MySQL boolean handling (TINYINT(1) vs BIT(1))
        registry.Register(SupportedDatabase.MySql, new MySqlBooleanCoercion());
        registry.Register(SupportedDatabase.MariaDb, new MySqlBooleanCoercion());

        // MySQL JSON native type
        registry.Register(SupportedDatabase.MySql, new MySqlJsonCoercion());
        registry.Register(SupportedDatabase.MariaDb, new MySqlJsonCoercion());

        // MySQL zero date handling
        registry.Register(SupportedDatabase.MySql, new MySqlDateTimeCoercion());
        registry.Register(SupportedDatabase.MariaDb, new MySqlDateTimeCoercion());
    }

    private static void RegisterOracleSpecific(CoercionRegistry registry)
    {
        // Oracle NUMBER precision handling
        registry.Register(SupportedDatabase.Oracle, new OracleNumberCoercion());

        // Oracle DATE vs TIMESTAMP
        registry.Register(SupportedDatabase.Oracle, new OracleDateTimeCoercion());
    }

    private static void RegisterSqliteSpecific(CoercionRegistry registry)
    {
        // SQLite TEXT-based JSON
        registry.Register(SupportedDatabase.Sqlite, new SqliteJsonCoercion());

        // SQLite flexible type system
        registry.Register(SupportedDatabase.Sqlite, new SqliteFlexibleCoercion());
    }

    private static void RegisterDuckDbSpecific(CoercionRegistry registry)
    {
        // DuckDB UUID native support
        registry.Register(SupportedDatabase.DuckDb, new DuckDbGuidCoercion());

        // DuckDB LIST types
        registry.Register(SupportedDatabase.DuckDb, new DuckDbListCoercion());

        // DuckDB STRUCT types
        registry.Register(SupportedDatabase.DuckDb, new DuckDbStructCoercion());
    }
}

// PostgreSQL-specific implementations

public class PostgreSqlGuidCoercion : DbCoercion<Guid>
{
    public override bool TryRead(in DbValue src, out Guid value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is Guid guid)
        {
            value = guid;
            return true;
        }

        if (src.RawValue is byte[] bytes && bytes.Length == 16)
        {
            value = new Guid(bytes);
            return true;
        }

        if (src.RawValue is string str)
        {
            return Guid.TryParse(str, out value);
        }

        value = default;
        return false;
    }

    public override bool TryWrite(Guid? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
            return true;
        }

        // PostgreSQL prefers binary format for UUIDs for performance
        parameter.Value = value.Value.ToByteArray();
        parameter.DbType = DbType.Binary;
        parameter.Size = 16;

        // Set provider-specific type if available
        if (parameter.GetType().Name.StartsWith("Npgsql"))
        {
            try
            {
                var npgsqlDbType = parameter.GetType().GetProperty("NpgsqlDbType");
                if (npgsqlDbType != null)
                {
                    // NpgsqlDbType.Uuid = 27
                    npgsqlDbType.SetValue(parameter, 27);
                }
            }
            catch
            {
                // Fall back to standard if provider types not available
            }
        }

        return true;
    }
}

public class PostgreSqlJsonCoercion : DbCoercion<JsonValue>
{
    public override bool TryRead(in DbValue src, out JsonValue value)
    {
        if (src.IsNull)
        {
            value = new JsonValue("null");
            return true;
        }

        if (src.RawValue is string jsonText)
        {
            try
            {
                value = JsonValue.Parse(jsonText);
                return true;
            }
            catch (JsonException)
            {
                value = default;
                return false;
            }
        }

        value = default;
        return false;
    }

    public override bool TryWrite(JsonValue? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
            return true;
        }

        parameter.Value = value.Value.AsString();

        // Set PostgreSQL JSONB type for better performance
        if (parameter.GetType().Name.StartsWith("Npgsql"))
        {
            try
            {
                var npgsqlDbType = parameter.GetType().GetProperty("NpgsqlDbType");
                if (npgsqlDbType != null)
                {
                    // NpgsqlDbType.Jsonb = 14
                    npgsqlDbType.SetValue(parameter, 14);
                }
            }
            catch
            {
                parameter.DbType = DbType.String;
            }
        }
        else
        {
            parameter.DbType = DbType.String;
        }

        return true;
    }
}

public class PostgreSqlArrayCoercion : DbCoercion<Array>
{
    public override bool TryRead(in DbValue src, out Array? value)
    {
        if (src.IsNull)
        {
            value = null;
            return true;
        }

        if (src.RawValue is Array array)
        {
            value = array;
            return true;
        }

        value = null;
        return false;
    }

    public override bool TryWrite(Array? value, DbParameter parameter)
    {
        if (value == null)
        {
            parameter.Value = DBNull.Value;
            return true;
        }

        parameter.Value = value;
        parameter.DbType = DbType.Object;

        // Set PostgreSQL array type
        if (parameter.GetType().Name.StartsWith("Npgsql"))
        {
            try
            {
                var npgsqlDbType = parameter.GetType().GetProperty("NpgsqlDbType");
                if (npgsqlDbType != null && value.Length > 0)
                {
                    // Determine array element type
                    var elementType = value.GetValue(0)?.GetType();
                    if (elementType == typeof(int))
                    {
                        // NpgsqlDbType.Array | NpgsqlDbType.Integer
                        npgsqlDbType.SetValue(parameter, (1 << 30) | 1);
                    }
                    else if (elementType == typeof(string))
                    {
                        // NpgsqlDbType.Array | NpgsqlDbType.Text
                        npgsqlDbType.SetValue(parameter, (1 << 30) | 16);
                    }
                }
            }
            catch
            {
                // Fall back to standard
            }
        }

        return true;
    }
}

public class PostgreSqlEnumCoercion : DbCoercion<Enum>
{
    public override bool TryRead(in DbValue src, out Enum? value)
    {
        value = null;
        return false; // This needs type information to work properly
    }

    public override bool TryWrite(Enum? value, DbParameter parameter)
    {
        if (value == null)
        {
            parameter.Value = DBNull.Value;
            return true;
        }

        // PostgreSQL enums are stored as text by default
        parameter.Value = value.ToString();
        parameter.DbType = DbType.String;
        return true;
    }
}

public class PostgreSqlBitCoercion : DbCoercion<bool>
{
    public override bool TryRead(in DbValue src, out bool value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is bool boolValue)
        {
            value = boolValue;
            return true;
        }

        // PostgreSQL bit(1) comes as string "1" or "0"
        if (src.RawValue is string bitString)
        {
            value = bitString == "1";
            return true;
        }

        // Or as byte
        if (src.RawValue is byte byteValue)
        {
            value = byteValue != 0;
            return true;
        }

        value = default;
        return false;
    }

    public override bool TryWrite(bool? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
            return true;
        }

        parameter.Value = value.Value;
        parameter.DbType = DbType.Boolean;
        return true;
    }
}

// SQL Server specific implementations

public class SqlServerGuidCoercion : DbCoercion<Guid>
{
    public override bool TryRead(in DbValue src, out Guid value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is Guid guid)
        {
            value = guid;
            return true;
        }

        if (src.RawValue is string str)
        {
            return Guid.TryParse(str, out value);
        }

        value = default;
        return false;
    }

    public override bool TryWrite(Guid? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value;
        }

        parameter.DbType = DbType.Guid;
        return true;
    }
}

public class SqlServerJsonCoercion : DbCoercion<JsonValue>
{
    public override bool TryRead(in DbValue src, out JsonValue value)
    {
        if (src.IsNull)
        {
            value = new JsonValue("null");
            return true;
        }

        if (src.RawValue is string jsonText)
        {
            try
            {
                value = JsonValue.Parse(jsonText);
                return true;
            }
            catch (JsonException)
            {
                value = default;
                return false;
            }
        }

        value = default;
        return false;
    }

    public override bool TryWrite(JsonValue? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value.AsString();
        }

        // SQL Server stores JSON as NVARCHAR(MAX)
        parameter.DbType = DbType.String;
        parameter.Size = -1; // MAX
        return true;
    }
}

public class SqlServerHierarchyIdCoercion : DbCoercion<byte[]>
{
    public override bool TryRead(in DbValue src, out byte[]? value)
    {
        if (src.IsNull)
        {
            value = null;
            return true;
        }

        if (src.RawValue is byte[] bytes)
        {
            value = bytes;
            return true;
        }

        // HierarchyID can also be read as string
        if (src.RawValue is string hierarchyText)
        {
            // This would need proper HierarchyID parsing logic
            value = null;
            return false;
        }

        value = null;
        return false;
    }

    public override bool TryWrite(byte[]? value, DbParameter parameter)
    {
        if (value == null)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value;
        }

        parameter.DbType = DbType.Object;
        return true;
    }
}

public class SqlServerMoneyCoercion : DbCoercion<decimal>
{
    public override bool TryRead(in DbValue src, out decimal value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is decimal decimalValue)
        {
            value = decimalValue;
            return true;
        }

        if (src.RawValue is double doubleValue)
        {
            value = (decimal)doubleValue;
            return true;
        }

        value = default;
        return false;
    }

    public override bool TryWrite(decimal? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value;
        }

        parameter.DbType = DbType.Currency;
        return true;
    }
}

// MySQL specific implementations

public class MySqlBooleanCoercion : DbCoercion<bool>
{
    public override bool TryRead(in DbValue src, out bool value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is bool boolValue)
        {
            value = boolValue;
            return true;
        }

        // MySQL BIT(1) comes as byte
        if (src.RawValue is byte byteValue)
        {
            value = byteValue != 0;
            return true;
        }

        // MySQL TINYINT(1) comes as sbyte
        if (src.RawValue is sbyte sbyteValue)
        {
            value = sbyteValue != 0;
            return true;
        }

        value = default;
        return false;
    }

    public override bool TryWrite(bool? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value ? (byte)1 : (byte)0;
        }

        parameter.DbType = DbType.Byte;
        return true;
    }
}

public class MySqlJsonCoercion : DbCoercion<JsonValue>
{
    public override bool TryRead(in DbValue src, out JsonValue value)
    {
        if (src.IsNull)
        {
            value = new JsonValue("null");
            return true;
        }

        if (src.RawValue is string jsonText)
        {
            try
            {
                value = JsonValue.Parse(jsonText);
                return true;
            }
            catch (JsonException)
            {
                value = default;
                return false;
            }
        }

        value = default;
        return false;
    }

    public override bool TryWrite(JsonValue? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value.AsString();
        }

        parameter.DbType = DbType.String;
        return true;
    }
}

public class MySqlDateTimeCoercion : DbCoercion<DateTime>
{
    public override bool TryRead(in DbValue src, out DateTime value)
    {
        if (src.IsNull)
        {
            value = default;
            return false;
        }

        if (src.RawValue is DateTime dt)
        {
            // Handle MySQL zero dates
            if (dt == new DateTime(1, 1, 1))
            {
                value = default;
                return false; // Treat as null unless AllowZeroDate attribute is present
            }

            value = dt;
            return true;
        }

        value = default;
        return false;
    }

    public override bool TryWrite(DateTime? value, DbParameter parameter)
    {
        if (!value.HasValue)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = value.Value;
        }

        parameter.DbType = DbType.DateTime;
        return true;
    }
}

// Placeholder implementations for other providers
public class OracleNumberCoercion : DbCoercion<decimal>
{
    public override bool TryRead(in DbValue src, out decimal value) { value = default; return false; }
    public override bool TryWrite(decimal? value, DbParameter parameter) { return false; }
}

public class OracleDateTimeCoercion : DbCoercion<DateTime>
{
    public override bool TryRead(in DbValue src, out DateTime value) { value = default; return false; }
    public override bool TryWrite(DateTime? value, DbParameter parameter) { return false; }
}

public class SqliteJsonCoercion : DbCoercion<JsonValue>
{
    public override bool TryRead(in DbValue src, out JsonValue value) { value = default; return false; }
    public override bool TryWrite(JsonValue? value, DbParameter parameter) { return false; }
}

public class SqliteFlexibleCoercion : DbCoercion<object>
{
    public override bool TryRead(in DbValue src, out object? value) { value = default; return false; }
    public override bool TryWrite(object? value, DbParameter parameter) { return false; }
}

public class DuckDbGuidCoercion : DbCoercion<Guid>
{
    public override bool TryRead(in DbValue src, out Guid value) { value = default; return false; }
    public override bool TryWrite(Guid? value, DbParameter parameter) { return false; }
}

public class DuckDbListCoercion : DbCoercion<Array>
{
    public override bool TryRead(in DbValue src, out Array? value) { value = default; return false; }
    public override bool TryWrite(Array? value, DbParameter parameter) { return false; }
}

public class DuckDbStructCoercion : DbCoercion<object>
{
    public override bool TryRead(in DbValue src, out object? value) { value = default; return false; }
    public override bool TryWrite(object? value, DbParameter parameter) { return false; }
}